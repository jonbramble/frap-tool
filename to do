to do

read in tiff data

load images into list

extract data to array

gsl fitting

binning and scaling

	//cout << "argc = " << argc << endl;
   	//for(int i = 0; i < argc; i++)
     	//	cout << "argv[" << i << "] = " << argv[i] << endl; 
	
	const unsigned char red[] = { 255,0,0 }, green[] = { 0,255,0 }, blue[] = { 0,0,255 };
	//int x,y;
	//float val, valprima, valimage, valdiff;
	CImg<float> prima("prima.tif");
	CImg<float> image("3m.tif");
	CImg<float> diff, res;
	CImg<float> visual(500,400,1,1,0);
	
	diff = prima-image;
	

	//img = diff.histogram(4096);
	//img.display_graph(0,3);
	//x=100;
	//y=100;

	//valprima = prima.atXY(x,y);
	//valimage = image.atXY(x,y);
	//valdiff = diff.atXY(x,y);

	//cout << " at 100,100 prima " << valprima <<  endl;
	//cout << " at 100,100 image " << valimage << endl;
	//cout << " at 100,100 diff " << valdiff << endl;
	
	
	CImgDisplay main_disp(diff,"FRAP"), draw_disp(visual,"Intensity profile");
	while (!main_disp.is_closed()) {
	main_disp.wait();
		if (main_disp.button() && main_disp.mouse_y()>=0) {
		//x = main_disp.mouse_x();
		//y = main_disp.mouse_y();
		//val = image.atXY(x,y);	

		//const int y = main_disp.mouse_y();
        	//visual.fill(0).draw_graph(diff.get_crop(0,y,0,0,diff.width()-1,y,0,0),red,1,1,0,4096,0).display(draw_disp);

		}
	}
	
	return 0;



/*
selection selectline(char *filename){
	selection pick;
	if(filename!= NULL) {
	
	int currentx, currenty;
	const unsigned char color[] = { 0,0,0 };

	CImg<float> image(filename), fresh(filename);
	CImgDisplay main_display(image,filename);

	pick.x1=0;
	pick.setone = false;
	pick.settwo = false;
	
	while (!main_display.is_closed()) {
		main_display.wait();

		if(main_display.button()>=0){
			currentx = main_display.mouse_x(); //get x and y points
			currenty = main_display.mouse_y();

			if(pick.x1!=0){
				image.draw_line(pick.x1,pick.y1,currentx,currenty,color).display(main_display);	
				image = fresh; //reload image with a clean one
			}
			
			if(main_display.button()==1){
				pick.setone = false;
				pick.x1 = currentx;  // left click to set starting point
				pick.y1 = currenty;
				image = fresh; 		
				main_display.set_button(0);  // breaks out of this sequence if mouse is held down	
				pick.setone = true;	// know that the point has been set
			}			

			if(main_display.button()==2){
				pick.settwo = false;
				pick.x2 = main_display.mouse_x();
				pick.y2 = main_display.mouse_y();
				pick.settwo = true;
				main_display.close(); //right click to close
				}
			}
		}
	}
	return pick;
}


/*

void dataset(char* filename, selection pick, gsl_vector * v){
	int xsize = pick.x2-pick.x1;
	int ysize = pick.y2-pick.y1;
	
	float m = (float)ysize/xsize;

	CImg<float> image(filename);
	float  shift = 65536/image.max();
	image*=shift;

	CImg<float> crop(abs(xsize),abs(ysize),1,1,0);	
	CImgDisplay main_display(crop,"crop");
	image.get_crop(pick.x1,pick.y1,pick.x2,pick.y2,0).display(main_display);

	float c = (float)pick.y2-m*(float)pick.x2;
	float y, valimage;

	for(int xk = pick.x1;xk<pick.x2;xk++)
	{
		y = round(m*xk+c);
		valimage = image.atXY(xk,(int)y);

		gsl_vector_set (v, xk-pick.x1, valimage);
	}

	while (!main_display.is_closed()) {
		main_display.wait();
	}
	
	
}*/


/*
void Frap::display(char* filename){
	CImg<float> image(filename);
	CImgDisplay main_disp(image,filename);
	while (!main_disp.is_closed()) {
	main_disp.wait();
	}
} 
*/


/*
void Frap::setprima(char* filename){
	prima = filename;
}

void Frap::setclosed(char* filename){
	closed = filename;
}*/


/*
void Frap::removebackground(){
	for(int i =0; i< imagefiles.size(); i++)
	{
		CImg<float> prima(prima);
		CImg<float> image(imagefiles[i]);
		CImg<float> diff;
		diff = prima-image;
	}
}
*/
